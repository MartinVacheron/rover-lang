// Discard expression

// Simple syntaxe

code:
f(arg1)
f(arg1, arg2, arg3)
f(arg1,)
f(arg1, arg2, arg3,)
f(
    arg1
)
f(
    arg1,
)
f(arg1,
    arg2, arg3,
)

expect:
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
]
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
    [Identifier arg2]
    [Identifier arg3]
]
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
]
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
    [Identifier arg2]
    [Identifier arg3]
]
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
]
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
]
[Fn call
    callee:
    [Identifier f]
    args:
    [Identifier arg1]
    [Identifier arg2]
    [Identifier arg3]
]

================

// Complex

code:
add({1 + add(2,3)}, if true do 8 else 24)

expect:
[Fn call
    callee:
    [Identifier add]
    args:
    [Block]
        [Binop +]
            [Int literal 1]
            [Fn call
                callee:
                [Identifier add]
                args:
                [Int literal 2]
                [Int literal 3]
            ]
    [If
        condition:
        [Bool literal true]
        then body:
        [Int literal 8]
        else body:
        [Int literal 24]
    ]
]

================

code:
{get_fn()}()

expect:
[Fn call
    callee:
    [Block]
        [Fn call
            callee:
            [Identifier get_fn]
            args:
        ]
    args:
]

================

code:
add()()

expect:
[Fn call
    callee:
    [Fn call
        callee:
        [Identifier add]
        args:
    ]
    args:
]

================

// Errors

code:
add(

error:
ExpectParenAfterFnArgs

================

